from aiogram import Router, types, Bot, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import keyboards
from utils.ai import create_prompt_taskskill, create_analyze_answer
router = Router()

user_dialog_history = {}

class SkillState(StatesGroup):
    skill = State()
    mode = State()
    answer = State()

@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    keyboard = keyboards.get_main_keyboard() 
    await message.answer("""
        üåü –ü—Ä–∏–≤–µ—Ç, –±—Ä–æ! –Ø SkillDebater ‚Äî —Ç–≤–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ –ø—Ä–æ–∫–∞—á–∫–µ –Ω–∞–≤—ã–∫–æ–≤ –∏ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤—É –¥–µ–±–∞—Ç–æ–≤! üí¨  
–•–æ—á–µ—à—å —Å—Ç–∞—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–µ–µ, –≥–æ–≤–æ—Ä–∏—Ç—å —á—ë—Ç–∫–æ –∏–ª–∏ –ø–æ–±–µ–∂–¥–∞—Ç—å –≤ —Å–ø–æ—Ä–∞—Ö? üöÄ  
    –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:  
        ‚ú® Skills Mode ‚Äî —Ç—Ä–µ–Ω–∏—Ä—É–π –Ω–∞–≤—ã–∫–∏ (–ø—É–±–ª–∏—á–Ω—ã–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è, —Ä–µ—á—å –∏ –¥—Ä.)  
        üó£Ô∏è Debate Mode ‚Äî —Å–ø–æ—Ä—å –∫–∞–∫ –ø—Ä–æ—Ñ–∏ –Ω–∞ –∫—Ä—É—Ç—ã–µ —Ç–µ–º—ã!  
–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É –∏ –Ω–∞—á–Ω—ë–º! üòé
        """, reply_markup=keyboard
    )

@router.message(F.text == "‚ú®Skills Mode")
async def skill_mode(message: types.Message, state: FSMContext):
    keyboard = keyboards.get_skillmode_keyboard()
    await state.set_state(SkillState.skill)
    await message.answer("–î–∞–≤–∞–π –ø—Ä–æ–∫–∞—á–∞–µ–º —Ç–≤–æ–∏ soft skills! –í—ã–±–µ—Ä–∏ –Ω–∞–≤—ã–∫ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É–ª—É—á—à–∏—Ç—å", reply_markup=keyboard)

@router.callback_query(SkillState.skill, F.data.in_({"one", "two", "three","four","five"}))
async def callback_skillmode(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    if callback.data == "one":
        await state.update_data(skill="–ü—É–±–ª–∏—á–Ω—ã–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è üéôÔ∏è")
    elif callback.data == "two":
        await state.update_data(skill="–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å üé®")
    elif callback.data == "three":
        await state.update_data(skill="–õ–∞–∫–æ–Ω–∏—á–Ω–æ—Å—Ç—å üéâ")
    elif callback.data == "four":
        await state.update_data(skill="–≠–º–ø–∞—Ç–∏—è üíñ")
    elif callback.data == "five":
        await state.update_data(skill="–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ ü§î")

    keyboard = keyboards.get_mode_keyboard()
    await bot.send_message(chat_id=callback.message.chat.id, text="–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –æ—Ü–µ–Ω–∫–∏.", reply_markup=keyboard)

    await state.set_state(SkillState.mode)

@router.callback_query(SkillState.mode, F.data.in_({"easy_skill", "standart_skill", "hard_skill"}))
async def callback_mode(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    if callback.data == "easy_skill":
        await state.update_data(mode="–ú—è–≥–∫–∏–π")
    elif callback.data == "standart_skill":
        await state.update_data(mode="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π")
    elif callback.data == "hard_skill":
        await state.update_data(mode="–°—Ç—Ä–æ–≥–∏–π")


    await bot.send_message(chat_id=callback.message.chat.id, text="‚åõ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...")
    data = await state.get_data()
    skill = data["skill"]
    mode = data["mode"]
    answer = await create_prompt_taskskill(skill, mode)
    #—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    if callback.from_user.id not in user_dialog_history:
        user_dialog_history[callback.from_user.id] = []
    user_dialog_history[callback.from_user.id].append(("–ë–æ—Ç", answer))

    await bot.send_message(chat_id=callback.message.chat.id, text=answer) 
    await state.set_state(SkillState.answer)

@router.message(SkillState.answer)
async def answer_message(message: types.Message, state: FSMContext):
    await state.update_data(answer=message.text)

    await message.answer("‚åõ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...")
    data = await state.get_data()
    skill = data["skill"]
    mode = data["mode"]
    user_id = message.from_user.id
    history = user_dialog_history.get(user_id, []) 
    if history:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        history_str = "\n".join([f"{sender}: {msg}" for sender, msg in history])
    answer = data["answer"]
    await state.clear()
    answerbot = await create_analyze_answer(skill, mode, history_str, answer)
    await message.answer(answerbot)

    if message.from_user.id not in user_dialog_history:
            user_dialog_history[message.from_user.id] = []
    user_dialog_history[message.from_user.id].append(("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", message.text))

    #—É–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if user_id in user_dialog_history:
        del user_dialog_history[user_id]


@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer("–ü–æ–º–æ—â—å: ...")

