from aiogram import Router, types, Bot, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import keyboards
from utils.ai import create_prompt_taskskill, create_analyze_answer, continious_answer, create_task_chatgpt_debate, create_prompt_debate, continious_debate
router = Router()

user_dialog_history = {}


class SkillState(StatesGroup):
    skill = State()
    level = State()
    mode = State()
    answer = State()

class DebateState(StatesGroup):
    theme_type = State()
    level = State()
    theme = State()
    mode = State()

@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    keyboard = keyboards.get_main_keyboard() 
    await message.answer("""
        üåü –ü—Ä–∏–≤–µ—Ç, –±—Ä–æ! –Ø SkillDebater ‚Äî —Ç–≤–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ –ø—Ä–æ–∫–∞—á–∫–µ –Ω–∞–≤—ã–∫–æ–≤ –∏ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤—É –¥–µ–±–∞—Ç–æ–≤! üí¨  
–•–æ—á–µ—à—å —Å—Ç–∞—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–µ–µ, –≥–æ–≤–æ—Ä–∏—Ç—å —á—ë—Ç–∫–æ –∏–ª–∏ –ø–æ–±–µ–∂–¥–∞—Ç—å –≤ —Å–ø–æ—Ä–∞—Ö? üöÄ  
    –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:  
        ‚ú® Skills Mode ‚Äî —Ç—Ä–µ–Ω–∏—Ä—É–π –Ω–∞–≤—ã–∫–∏ (–ø—É–±–ª–∏—á–Ω—ã–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è, —Ä–µ—á—å –∏ –¥—Ä.)  
        üó£Ô∏è Debate Mode ‚Äî —Å–ø–æ—Ä—å –∫–∞–∫ –ø—Ä–æ—Ñ–∏ –Ω–∞ –∫—Ä—É—Ç—ã–µ —Ç–µ–º—ã!  
–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É –∏ –Ω–∞—á–Ω—ë–º! üòé
        """, reply_markup=keyboard
    )

#SKILLS MODE
@router.message(F.text == "‚ú®Skills Mode")
async def skill_mode(message: types.Message, state: FSMContext):
    keyboard = keyboards.get_skillmode_keyboard()
    await state.set_state(SkillState.skill)
    await message.answer("–î–∞–≤–∞–π –ø—Ä–æ–∫–∞—á–∞–µ–º —Ç–≤–æ–∏ soft skills! –í—ã–±–µ—Ä–∏ –Ω–∞–≤—ã–∫ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É–ª—É—á—à–∏—Ç—å", reply_markup=keyboard)

#–û–¢–ú–ï–ù–ê
@router.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def skill_mode(message: types.Message, state: FSMContext):
    await state.clear()
    keyboard = keyboards.get_main_keyboard() 
    await message.answer("""
        üåü –ü—Ä–∏–≤–µ—Ç, –±—Ä–æ! –Ø SkillDebater ‚Äî —Ç–≤–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ –ø—Ä–æ–∫–∞—á–∫–µ –Ω–∞–≤—ã–∫–æ–≤ –∏ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤—É –¥–µ–±–∞—Ç–æ–≤! üí¨  
–•–æ—á–µ—à—å —Å—Ç–∞—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–µ–µ, –≥–æ–≤–æ—Ä–∏—Ç—å —á—ë—Ç–∫–æ –∏–ª–∏ –ø–æ–±–µ–∂–¥–∞—Ç—å –≤ —Å–ø–æ—Ä–∞—Ö? üöÄ  
    –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:  
        ‚ú® Skills Mode ‚Äî —Ç—Ä–µ–Ω–∏—Ä—É–π –Ω–∞–≤—ã–∫–∏ (–ø—É–±–ª–∏—á–Ω—ã–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è, —Ä–µ—á—å –∏ –¥—Ä.)  
        üó£Ô∏è Debate Mode ‚Äî —Å–ø–æ—Ä—å –∫–∞–∫ –ø—Ä–æ—Ñ–∏ –Ω–∞ –∫—Ä—É—Ç—ã–µ —Ç–µ–º—ã!  
–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É –∏ –Ω–∞—á–Ω—ë–º! üòé
        """, reply_markup=keyboard
    )
    user_id = message.from_user.id
    if user_id in user_dialog_history:
        del user_dialog_history[user_id]  # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞


@router.callback_query(SkillState.skill, F.data.in_({"one", "two", "three","four","five"}))
async def callback_skillmode(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    if callback.data == "one":
        await state.update_data(skill="–ü—É–±–ª–∏—á–Ω—ã–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è üéôÔ∏è")
    elif callback.data == "two":
        await state.update_data(skill="–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å üé®")
    elif callback.data == "three":
        await state.update_data(skill="–õ–∞–∫–æ–Ω–∏—á–Ω–æ—Å—Ç—å üéâ")
    elif callback.data == "four":
        await state.update_data(skill="–≠–º–ø–∞—Ç–∏—è üíñ")
    elif callback.data == "five":
        await state.update_data(skill="–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ ü§î")
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)

    keyboard = keyboards.get_task_difficulty_keyboard()
    await bot.send_message(chat_id=callback.message.chat.id, text="–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è", reply_markup=keyboard)

    await state.set_state(SkillState.level)

@router.callback_query(SkillState.level, F.data.in_({"easy_task", "medium_task", "hard_task"}))
async def callback_level(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    if callback.data == "easy_task":
        await state.update_data(level="–õ—ë–≥–∫–æ–µ")
    elif callback.data == "medium_task":
        await state.update_data(level="–°—Ä–µ–¥–Ω–µ–µ")
    elif callback.data == "hard_task":
        await state.update_data(level="–°–ª–æ–∂–Ω–æ–µ")
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)

    keyboard = keyboards.get_mode_keyboard()
    await bot.send_message(chat_id=callback.message.chat.id, text="–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç—Ä–æ–≥–æ—Å—Ç—å –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è", reply_markup=keyboard)

    await state.set_state(SkillState.mode)

@router.callback_query(SkillState.mode, F.data.in_({"easy_skill", "standart_skill", "hard_skill"}))
async def callback_mode(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    if callback.data == "easy_skill":
        await state.update_data(mode="–ú—è–≥–∫–∏–π")
    elif callback.data == "standart_skill":
        await state.update_data(mode="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π")
    elif callback.data == "hard_skill":
        await state.update_data(mode="–°—Ç—Ä–æ–≥–∏–π")

    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    await bot.send_message(chat_id=callback.message.chat.id, text="‚åõ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...")
    data = await state.get_data()
    skill = data["skill"]
    mode = data["mode"]
    level = data["level"]
    answer = await create_prompt_taskskill(skill, mode, level)
    #—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    if callback.from_user.id not in user_dialog_history:
        user_dialog_history[callback.from_user.id] = []
    user_dialog_history[callback.from_user.id].append(("–ë–æ—Ç", answer))

    await bot.send_message(chat_id=callback.message.chat.id, text=answer) 
    await state.set_state(SkillState.answer)

@router.message(SkillState.answer, F.text)
async def answer_message(message: types.Message, state: FSMContext):
    await state.update_data(answer=message.text)
    await add_histotyUSER(message.from_user.id, message.text)
    await message.answer("‚åõ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...")
    data = await state.get_data()
    skill = data["skill"]
    mode = data["mode"]
    user_id = message.from_user.id
    history = user_dialog_history.get(user_id, []) 
    if history:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        history_str = "\n".join([f"{sender}: {msg}" for sender, msg in history])
    answer = data["answer"]
    answerbot = await create_analyze_answer(skill, mode, history_str, answer)
    keyboard = keyboards.get_cancel_keyboard()
    await message.answer(answerbot, reply_markup=keyboard)
    await add_histotyBOT(message.from_user.id, answerbot)


#DEBATE MODE
@router.message(F.text == "üó£Ô∏èDebate Mode")
async def debate_mode(message: types.Message, state: FSMContext):
    keyboard = keyboards.get_debate_keyboard()
    await state.set_state(DebateState.theme_type)
    await message.answer("–ì–æ—Ç–æ–≤ –ø–æ—Å–ø–æ—Ä–∏—Ç—å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã? üó£Ô∏è –í—ã–±–µ—Ä–∏, —Ö–æ—á–µ—à—å —Ä–∞–Ω–¥–æ–º–Ω—É—é —Ç–µ–º—É –∏–ª–∏ —Å–≤–æ—é! üòé", reply_markup=keyboard)

@router.callback_query(DebateState.theme_type, F.data.in_({"random_theme", "my_theme"}))
async def callback_theme_choice(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    if callback.data == "random_theme":
        await state.update_data(theme_type="random")
        keyboard = keyboards.get_debate_difficulty_keyboard()
        await bot.send_message(chat_id=callback.message.chat.id, text="–ö–ª–∞—Å—Å, –≤—ã–±–µ—Ä–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–µ–º—ã! üòé", reply_markup=keyboard)
        await state.set_state(DebateState.level)
        await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    elif callback.data == "my_theme":
        await state.update_data(theme_type="user")
        await bot.send_message(chat_id=callback.message.chat.id, text="–ù–∞–ø–∏—à–∏ —Å–≤–æ—é —Ç–µ–º—É –¥–ª—è —Å–ø–æ—Ä–∞! ‚úçÔ∏è")
        await state.set_state(DebateState.theme)


@router.callback_query(DebateState.level, F.data.in_({"easy_theme", "medium_theme", "hard_theme"}))
async def callback_level(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    if callback.data == "easy_theme":
        await state.update_data(level="–õ–µ–≥–∫–∞—è")
    elif callback.data == "medium_theme":
        await state.update_data(level="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è")
    elif callback.data == "hard_theme":
        await state.update_data(level="–°–ª–æ–∂–Ω–∞—è")
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)

    keyboard = keyboards.get_mode_debate_keyboard()
    await bot.send_message(chat_id=callback.message.chat.id, text="–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, –∫–∞–∫ —Å—Ç—Ä–æ–≥–æ –±—É–¥–µ–º –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ç–≤–æ–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã! üòé", reply_markup=keyboard)
    await state.set_state(DebateState.mode)

@router.message(DebateState.theme)
async def answer_message(message: types.Message, state: FSMContext):
    await state.update_data(theme=message.text)
    keyboard = keyboards.get_mode_debate_keyboard()
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, –∫–∞–∫ —Å—Ç—Ä–æ–≥–æ –±—É–¥–µ–º –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ç–≤–æ–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã! üòé", reply_markup=keyboard)
    await state.set_state(DebateState.mode)

@router.callback_query(DebateState.mode, F.data.in_({"easy_debate", "standart_debate", "hard_debate"}))
async def callback_mode(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    if callback.data == "easy_debate":
        await state.update_data(mode="–ú—è–≥–∫–∏–π")
    elif callback.data == "standart_debate":
        await state.update_data(mode="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π")
    elif callback.data == "hard_debate":
        await state.update_data(mode="–°—Ç—Ä–æ–≥–∏–π")

    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    await bot.send_message(chat_id=callback.message.chat.id, text="‚åõ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...")
    data = await state.get_data()
    if "level" in data:
       level = data["level"]
    else:
        level = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ç–µ–º–∞'
    mode = data["mode"]
    if "theme" in data:
       theme = data["theme"]
    else:
        theme = "–†–∞–Ω–¥–æ–º–Ω–∞—è —Ç–µ–º–∞. –ü—Ä–∏–¥—É–º–∞–π —Ç–µ–º—É –ø–æ —É—Ä–æ–≤–Ω—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"
    answerbot = await create_prompt_debate(mode, level, theme)
    keyboard = keyboards.get_cancel_keyboard()
    await bot.send_message(chat_id=callback.message.chat.id, text=answerbot, reply_markup=keyboard)
    #—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    if callback.from_user.id not in user_dialog_history:
        user_dialog_history[callback.from_user.id] = []
    user_dialog_history[callback.from_user.id].append(("–ë–æ—Ç", answerbot))


@router.message(DebateState.mode, F.text)
async def answer_message_debate(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await add_histotyUSER(message.from_user.id, message.text)
    history = user_dialog_history.get(user_id, []) 
    if history:
        await message.answer("‚åõ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...")
        data = await state.get_data()
        mode = data["mode"]
        history_str = "\n".join([f"{sender}: {msg}" for sender, msg in history])
        answerbot = await continious_debate(history_str, message.text, mode)
        await add_histotyBOT(message.from_user.id, answerbot)
        await message.answer(answerbot)




@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer("–ü–æ–º–æ—â—å: ...")


async def add_histotyBOT(userid: int, mes: str):
    if userid not in user_dialog_history:
        user_dialog_history[userid] = []
    user_dialog_history[userid].append(("–ë–æ—Ç: ", mes))

async def add_histotyUSER(userid: int, mes: str):
    if userid not in user_dialog_history:
        user_dialog_history[userid] = []
    user_dialog_history[userid].append(("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ", mes))

